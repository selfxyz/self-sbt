name: Deploy SelfSBTV2

on:
  workflow_dispatch:
    inputs:
      # Required parameters (must be provided)
      network:
        description: "Network to deploy on"
        required: true
        type: choice
        options:
          - "celo-mainnet"
          - "celo-alfajores"
        default: "celo-alfajores"
      owner_address:
        description: "Address that will own the deployed contract"
        required: true
        type: string
      verification_config_id:
        description: "Verification configuration ID (bytes32 format: 0x...)"
        required: true
        type: string
        default: "0x7b6436b0c98f62380866d9432c2af0ee08ce16a171bda6951aecd95ee1307d61"
      scope_seed:
        description: "Scope identifier used in your frontend Self SDK"
        required: true
        type: string
      placeholder_scope:
        description: "Placeholder scope value for initial deployment (default: 1)"
        required: false
        default: "1"
        type: string

      # Optional parameters (have defaults or fallbacks)
      custom_deployer_private_key:
        description: "Custom deployer private key (optional - uses default deployer if not provided)"
        required: false
        type: string
      validity_period:
        description: "Token validity period in seconds (default: 15552000 = 180 days)"
        required: false
        default: "15552000"
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('ts-scripts/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install root dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Foundry dependencies
        run: forge install

      - name: Install TypeScript dependencies
        run: |
          cd ts-scripts
          pnpm install --frozen-lockfile
          pnpm run build

      - name: Configure network settings
        id: network-config
        run: |
          echo "üåê Configuring network settings for: ${{ github.event.inputs.network }}"

          case "${{ github.event.inputs.network }}" in
            "celo-mainnet")
              echo "IDENTITY_VERIFICATION_HUB_ADDRESS=0xe57F4773bd9c9d8b6Cd70431117d353298B9f5BF" >> $GITHUB_OUTPUT
              echo "RPC_URL=https://forno.celo.org" >> $GITHUB_OUTPUT
              echo "NETWORK_NAME=celo-mainnet" >> $GITHUB_OUTPUT
              echo "CHAIN_ID=42220" >> $GITHUB_OUTPUT
              echo "BLOCK_EXPLORER_URL=https://celoscan.io" >> $GITHUB_OUTPUT
              # API key stored securely in environment for later use
              echo "CELOSCAN_API_KEY=${{ secrets.CELOSCAN_API_KEY }}" >> $GITHUB_ENV
              ;;
            "celo-alfajores")
              echo "IDENTITY_VERIFICATION_HUB_ADDRESS=0x68c931C9a534D37aa78094877F46fE46a49F1A51" >> $GITHUB_OUTPUT
              echo "RPC_URL=https://alfajores-forno.celo-testnet.org" >> $GITHUB_OUTPUT
              echo "NETWORK_NAME=celo-alfajores" >> $GITHUB_OUTPUT
              echo "CHAIN_ID=44787" >> $GITHUB_OUTPUT
              echo "BLOCK_EXPLORER_URL=https://alfajores.celoscan.io" >> $GITHUB_OUTPUT
              # API key stored securely in environment for later use
              echo "CELOSCAN_API_KEY=${{ secrets.CELOSCAN_API_KEY }}" >> $GITHUB_ENV
              ;;
          esac

          echo "‚úÖ Network configured:"
          echo "  Hub Address: $(echo '${{ github.event.inputs.network }}' | case ${{ github.event.inputs.network }} in celo-mainnet) echo '0xe57F4773bd9c9d8b6Cd70431117d353298B9f5BF';; celo-alfajores) echo '0x68c931C9a534D37aa78094877F46fE46a49F1A51';; esac)"
          echo "  RPC URL: $(echo '${{ github.event.inputs.network }}' | case ${{ github.event.inputs.network }} in celo-mainnet) echo 'https://forno.celo.org';; celo-alfajores) echo 'https://alfajores-forno.celo-testnet.org';; esac)"

      - name: Setup deployer configuration
        id: setup-deployer
        env:
          CUSTOM_PRIVATE_KEY: ${{ github.event.inputs.custom_deployer_private_key }}
          DEFAULT_PRIVATE_KEY: ${{ secrets.DEFAULT_DEPLOYER_PRIVATE_KEY }}
        run: |
          # Determine which private key to use
          if [[ -n "$CUSTOM_PRIVATE_KEY" ]]; then
            echo "Using custom deployer private key"
            PRIVATE_KEY="$CUSTOM_PRIVATE_KEY"
          else
            echo "Using default deployer from secrets"
            PRIVATE_KEY="$DEFAULT_PRIVATE_KEY"
          fi

          # Derive address from private key (without logging the private key)
          DEPLOYER_ADDRESS=$(cd ts-scripts && node -e "
            const { ethers } = require('ethers');
            const wallet = new ethers.Wallet('$PRIVATE_KEY');
            console.log(wallet.address);
          ")

          echo "DEPLOYER_ADDRESS=$DEPLOYER_ADDRESS" >> $GITHUB_OUTPUT
          echo "Deployer address: $DEPLOYER_ADDRESS"

          # Store private key securely for later steps (not in output)
          echo "PRIVATE_KEY=$PRIVATE_KEY" >> $GITHUB_ENV

      - name: Validate inputs
        run: |
          echo "üîç Validating deployment inputs..."

          # Validate Ethereum addresses
          validate_address() {
            if [[ ! $1 =~ ^0x[a-fA-F0-9]{40}$ ]]; then
              echo "‚ùå Invalid Ethereum address: $1"
              exit 1
            fi
          }

          # Validate bytes32
          validate_bytes32() {
            if [[ ! $1 =~ ^0x[a-fA-F0-9]{64}$ ]]; then
              echo "‚ùå Invalid bytes32 value: $1"
              exit 1
            fi
          }

          validate_address "${{ steps.setup-deployer.outputs.DEPLOYER_ADDRESS }}"
          validate_address "${{ steps.network-config.outputs.IDENTITY_VERIFICATION_HUB_ADDRESS }}"
          validate_address "${{ github.event.inputs.owner_address }}"
          validate_bytes32 "${{ github.event.inputs.verification_config_id }}"

          echo "‚úÖ All inputs validated successfully"

      - name: Build contracts
        run: |
          echo "üî® Building Solidity contracts..."
          forge build
          echo "‚úÖ Contract compilation successful!"

      - name: Deploy contract
        id: deploy-contract
        env:
          IDENTITY_VERIFICATION_HUB_ADDRESS: ${{ steps.network-config.outputs.IDENTITY_VERIFICATION_HUB_ADDRESS }}
          PLACEHOLDER_SCOPE: ${{ github.event.inputs.placeholder_scope }}
          OWNER_ADDRESS: ${{ github.event.inputs.owner_address }}
          VALIDITY_PERIOD: ${{ github.event.inputs.validity_period }}
          VERIFICATION_CONFIG_ID: ${{ github.event.inputs.verification_config_id }}
          ETH_FROM: ${{ steps.setup-deployer.outputs.DEPLOYER_ADDRESS }}
        run: |
          echo "üöÄ Deploying SelfSBTV2 contract with placeholder scope..."

          # Step 1: Deploy contract with placeholder scope
          DEPLOY_CMD="forge script script/DeployV2.s.sol:DeployV2 --rpc-url ${{ steps.network-config.outputs.RPC_URL }} --private-key $PRIVATE_KEY --broadcast"

          echo "üöÄ Step 1: Executing deployment..."
          eval $DEPLOY_CMD || {
            # Check if deployment actually succeeded despite exit code error
            if [[ -f "broadcast/DeployV2.s.sol/${{ steps.network-config.outputs.CHAIN_ID }}/run-latest.json" ]]; then
              echo "‚úÖ Contract deployment completed (ignoring wallet warnings)"
            else
              echo "‚ùå Contract deployment failed"
              exit 1
            fi
          }

          # Extract deployed contract address
          BROADCAST_DIR="broadcast/DeployV2.s.sol/${{ steps.network-config.outputs.CHAIN_ID }}"
          if [[ -f "$BROADCAST_DIR/run-latest.json" ]]; then
            CONTRACT_ADDRESS=$(jq -r '.transactions[] | select(.contractName == "SelfSBTV2") | .contractAddress' "$BROADCAST_DIR/run-latest.json" | head -1)
            
            if [[ -n "$CONTRACT_ADDRESS" && "$CONTRACT_ADDRESS" != "null" ]]; then
              echo "CONTRACT_ADDRESS=$CONTRACT_ADDRESS" >> $GITHUB_OUTPUT
              echo "üìã Contract deployed at: $CONTRACT_ADDRESS"
              echo "üîó View on explorer: ${{ steps.network-config.outputs.BLOCK_EXPLORER_URL }}/address/$CONTRACT_ADDRESS"
            else
              echo "‚ùå Could not extract contract address from deployment"
              exit 1
            fi
          else
            echo "‚ùå Could not find deployment artifacts"
            exit 1
          fi

          echo "‚úÖ Contract deployment completed!"

      - name: Calculate and set actual scope
        env:
          CONTRACT_ADDRESS: ${{ steps.deploy-contract.outputs.CONTRACT_ADDRESS }}
          SCOPE_SEED: ${{ github.event.inputs.scope_seed }}
          OWNER_ADDRESS: ${{ github.event.inputs.owner_address }}
        run: |
          echo "üßÆ Calculating actual scope using deployed address..."

          # Calculate scope using deployed address
          cd ts-scripts
          DEPLOYED_ADDRESS=$CONTRACT_ADDRESS pnpm run calculate-scope > ../scope_output.log 2>&1

          # Extract scope value from output
          SCOPE_VALUE=$(grep "Scope Value:" ../scope_output.log | tail -n1 | cut -d' ' -f3)

          if [[ -z "$SCOPE_VALUE" ]]; then
            echo "‚ùå Failed to calculate scope value"
            cat ../scope_output.log
            exit 1
          fi

          echo "‚úÖ Calculated scope value: $SCOPE_VALUE"

          # Call setScope function on the deployed contract
          echo "üîß Setting scope value on deployed contract..."
          cast send $CONTRACT_ADDRESS "setScope(uint256)" $SCOPE_VALUE --rpc-url ${{ steps.network-config.outputs.RPC_URL }} --private-key $PRIVATE_KEY || {
            echo "‚ö†Ô∏è Failed to call setScope automatically. Manual step required:"
            echo "üìã Call setScope($SCOPE_VALUE) on contract $CONTRACT_ADDRESS"
            echo "üìã Using: cast send $CONTRACT_ADDRESS \"setScope(uint256)\" $SCOPE_VALUE --rpc-url ${{ steps.network-config.outputs.RPC_URL }} --private-key \$PRIVATE_KEY"
            exit 1
          }
          echo "‚úÖ Scope value set successfully!"

      - name: Verify contract
        if: env.CELOSCAN_API_KEY != ''
        env:
          CONTRACT_ADDRESS: ${{ steps.deploy-contract.outputs.CONTRACT_ADDRESS }}
          IDENTITY_VERIFICATION_HUB_ADDRESS: ${{ steps.network-config.outputs.IDENTITY_VERIFICATION_HUB_ADDRESS }}
          PLACEHOLDER_SCOPE: ${{ github.event.inputs.placeholder_scope }}
          OWNER_ADDRESS: ${{ github.event.inputs.owner_address }}
          VALIDITY_PERIOD: ${{ github.event.inputs.validity_period }}
          VERIFICATION_CONFIG_ID: ${{ github.event.inputs.verification_config_id }}
        run: |
          echo "üîç Verifying contract on CeloScan..."

          # Determine chain name for forge verify-contract (following Celo docs)
          case "${{ github.event.inputs.network }}" in
            "celo-mainnet")
              CHAIN_NAME="celo"
              ;;
            "celo-alfajores")
              CHAIN_NAME="celo-alfajores"
              ;;
          esac

          # Encode constructor arguments for verification (with placeholder scope)
          CONSTRUCTOR_ARGS=$(cast abi-encode "constructor(address,uint256,address,uint256,bytes32)" \
            $IDENTITY_VERIFICATION_HUB_ADDRESS \
            $PLACEHOLDER_SCOPE \
            $OWNER_ADDRESS \
            $VALIDITY_PERIOD \
            $VERIFICATION_CONFIG_ID)

          echo "üìã Constructor args: $CONSTRUCTOR_ARGS"

          # Use forge verify-contract with constructor arguments
          forge verify-contract --constructor-args $CONSTRUCTOR_ARGS --chain-id $CHAIN_NAME $CONTRACT_ADDRESS src/SelfSBTV2.sol:SelfSBTV2 --watch || {
            echo "‚ö†Ô∏è Verification failed. You can verify manually at:"
            echo "üìã ${{ steps.network-config.outputs.BLOCK_EXPLORER_URL }}/verifyContract"
            echo "üìã Contract Address: $CONTRACT_ADDRESS"
          }

      - name: Create deployment summary
        env:
          CONTRACT_ADDRESS: ${{ steps.deploy-contract.outputs.CONTRACT_ADDRESS }}
        run: |
          echo "## üéâ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### üîó Quick Links" >> $GITHUB_STEP_SUMMARY
          echo "- **Contract Address**: [\`$CONTRACT_ADDRESS\`](${{ steps.network-config.outputs.BLOCK_EXPLORER_URL }}/address/$CONTRACT_ADDRESS)" >> $GITHUB_STEP_SUMMARY
          echo "- **View on Explorer**: [${{ steps.network-config.outputs.BLOCK_EXPLORER_URL }}/address/$CONTRACT_ADDRESS](${{ steps.network-config.outputs.BLOCK_EXPLORER_URL }}/address/$CONTRACT_ADDRESS)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "| Parameter | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Network** | ${{ steps.network-config.outputs.NETWORK_NAME }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Chain ID** | ${{ steps.network-config.outputs.CHAIN_ID }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Deployer** | ${{ steps.setup-deployer.outputs.DEPLOYER_ADDRESS }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Contract Address** | $CONTRACT_ADDRESS |" >> $GITHUB_STEP_SUMMARY
          echo "| **Hub Address** | ${{ steps.network-config.outputs.IDENTITY_VERIFICATION_HUB_ADDRESS }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **RPC URL** | ${{ steps.network-config.outputs.RPC_URL }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Block Explorer** | ${{ steps.network-config.outputs.BLOCK_EXPLORER_URL }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Owner** | ${{ github.event.inputs.owner_address }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Scope Seed** | ${{ github.event.inputs.scope_seed }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Placeholder Scope** | ${{ github.event.inputs.placeholder_scope }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Validity Period** | ${{ github.event.inputs.validity_period }} seconds |" >> $GITHUB_STEP_SUMMARY
          echo "| **Config ID** | ${{ github.event.inputs.verification_config_id }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Deployment Complete" >> $GITHUB_STEP_SUMMARY
          echo "1. **Contract deployed** with placeholder scope" >> $GITHUB_STEP_SUMMARY
          echo "2. **Actual scope calculated** from deployed address + scope seed" >> $GITHUB_STEP_SUMMARY
          echo "3. **Scope value set** on deployed contract automatically" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Important Notes" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Contract fully configured and ready for use" >> $GITHUB_STEP_SUMMARY
          echo "- üßÆ Actual scope value calculated from deployed address + scope seed" >> $GITHUB_STEP_SUMMARY
          echo "- üîí Private keys are never logged or stored" >> $GITHUB_STEP_SUMMARY
          echo "- üìã Contract verification may take a few minutes to complete" >> $GITHUB_STEP_SUMMARY

      - name: Save deployment artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: deployment-artifacts-${{ github.run_number }}
          path: |
            scope_output.log
            broadcast/
            deployments/
          retention-days: 30
